// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type OkRequestHandlerResponseBody record {|
    *http:Ok;
    RequestHandlerResponseBody body;
|};

public type OkResponseHandlerResponseBody record {|
    *http:Ok;
    ResponseHandlerResponseBody body;
|};

public type DynamicEndpoint record {
    string endpointName?;
};

# Map (string-to-string dictionary) of key value pairs of headers
public type Headers record {|
    string...;
|};

# Map (string-to-string dictionary) of key value pairs of rate limit keys
public type RateLimitKeys record {|
    string...;
|};

# Map (string-to-string dictionary) of key value pairs of trailers
public type Trailers record {|
    string...;
|};

public type RequestHandlerResponseBody record {
    boolean directRespond?;
    int responseCode?;
    DynamicEndpoint dynamicEndpoint?;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers headersToAdd?;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers headersToReplace?;
    # Array of header keys
    HeaderKeys headersToRemove?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers trailersToAdd?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers trailersToReplace?;
    # Array of header keys
    HeaderKeys trailersToRemove?;
    # Base64 encoded body
    Body body?;
    # Map (string-to-string dictionary) of key value pairs
    InterceptorContext interceptorContext?;
    # Map (string-to-string dictionary) of key value pairs of properties
    Properties properties?;
    # Map (string-to-string dictionary) of key value pairs of rate limit keys
    RateLimitKeys rateLimitKeys?;
};

# Map (string-to-string dictionary) of key value pairs of properties
public type Properties record {|
    string...;
|};

# Array of header keys
public type HeaderKeys string[];

public type ResponseHandlerRequestBody record {
    int responseCode;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers requestHeaders?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers requestTrailers?;
    # Base64 encoded body
    Body requestBody?;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers responseHeaders?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers responseTrailers?;
    # Base64 encoded body
    Body responseBody?;
    InvocationContext invocationContext?;
    # Map (string-to-string dictionary) of key value pairs
    InterceptorContext interceptorContext?;
};

public type ResponseHandlerResponseBody record {
    int responseCode?;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers headersToAdd?;
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers headersToReplace?;
    # Array of header keys
    HeaderKeys headersToRemove?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers trailersToAdd?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers trailersToReplace?;
    # Array of header keys
    HeaderKeys trailersToRemove?;
    # Base64 encoded body
    Body body?;
    # Map (string-to-string dictionary) of key value pairs of properties
    Properties properties?;
};

public type InvocationContext_authenticationContext record {
    string tokenType?;
    string token?;
    string keyType?;
};

# Map (string-to-string dictionary) of key value pairs
public type InterceptorContext record {|
    string...;
|};

public type RequestHandlerRequestBody record {
    # Map (string-to-string dictionary) of key value pairs of headers
    Headers requestHeaders?;
    # Map (string-to-string dictionary) of key value pairs of trailers
    Trailers requestTrailers?;
    # Base64 encoded body
    Body requestBody?;
    InvocationContext invocationContext?;
};

public type InvocationContext record {
    string requestId?;
    string protocol?;
    string scheme?;
    string apiName?;
    string apiVersion?;
    string vhost?;
    string supportedMethods?;
    string method?;
    string basePath?;
    string path?;
    string pathTemplate?;
    string 'source?;
    string prodClusterName?;
    string sandClusterName?;
    record {} apiProperties?;
    InvocationContext_authenticationContext authenticationContext?;
    string environment?;
};

# Base64 encoded body
public type Body string;
